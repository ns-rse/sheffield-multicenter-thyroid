```{r}
#| label: test-train-split-imputed
#| purl: true
#| eval: true
#| echo: false
#| output: false
## Prefer tidymodel commands (although in most places we use the convention <pkg>::<function>())
library(tidyverse)
library(tidymodels)
tidymodels::tidymodels_prefer()
set.seed(5039378)

## !!!!!!README!!!!!!
##
## I'm new to using purrr but from what I can work out/understand so far and the way we want to use it we start with a
## dataset that is piped into purrr::map() the first thing we do is then define how we will refer to this dataset using
## the notation `\(<some_name>)` we then provide a function we wish to apply to each split of the data and use
## `<some_name>` as an argument to that function.

## Use an imputed data set (cart) and purrr::map() to apply the split to each imputed dataset. We first remove the
## "Original" that is included in the data and the .id variable
## purrr_split is a list of data frames.
cart_imputed <- mice_cart$imputed |>
    dplyr::filter(.imp != "Original") |>
    dplyr::mutate(.imp = droplevels(.imp)) |>
    dplyr::select(-.id)
purrr_split <- cart_imputed |>
    split(cart_imputed$.imp) |>
    purrr::map(\(df) rsample::initial_split(df, prop = 0.75))

## This does the same but includes "Original", which we know won't work well due to missing data.
## purrr_split <- mice_cart$imputed |>
##     dplyr::select(-.id) |>
##     split(mice_cart$imputed$.imp) |>
##     purrr::map(\(df) rsample::initial_split(df, prop = 0.75))

## Then derive a training and test dataset for each imputed dataset.
## purrr_train and purrr_test are again lists of data frames.
purrr_train <- purrr_split |>
    purrr::map(\(split) rsample::training(split))
purrr_test <- purrr_split |>
    purrr::map(\(split) rsample::testing(split))

```

```{r}
#| label: cv-vfold-imputed
#| purl: true
#| eval: true
#| echo: false
#| output: false
## Again use purrr to map the training datasets onto vfold cross validation
purrr_cv_folds <- purrr_train |>
    purrr::map(\(df) rsample::vfold_cv(df, v = 10, repeats = 10))
```

```{r}
#| label: cv-loo-imputed
#| purl: true
#| eval: true
#| echo: false
#| output: false
## Or we can use purrr to map the training datasets onto leave one out cross validation
purrr_cv_loo <- purrr_train |>
    purrr::map(\(df) rsample::loo_cv(df))
```

```{r}
#| label: recipe-imputed
#| purl: true
#| eval: true
#| echo: false
#| output: false
purrr_thyroid_recipe_imputed <- purrr_train |>
    purrr::map(\(df) recipes::recipe(final_pathology ~ ., data = df)) |>
    ## @ns-rse 2024-08-01 :
    ## We don't need to filter missing because we are using imputed datasets
    ## https://recipes.tidymodels.org/reference/step_filter_missing.html
    ## recipes::step_filter_missing(recipes::all_predictors(), threshold = 0) |>
    purrr::map(\(df) recipes::step_normalize(df, recipes::all_numeric_predictors())) |>
    purrr::map(\(df) recipes::step_dummy(df, recipes::all_nominal_predictors()))

## !!!!!!INFO!!!!!!
##
## You can look at purrr_thyroid_recipe_imputed (just enter  'purrr_thyroid_recipe_imputed' without quotes at the R
## console and hit Return). It is a list of recipes, each has one outcome variable ('final_thyroid') and 23 predictors.
## There are two operations to be performed, one is to center and scale numeric predictors, the other is to create dummy
## variables for all nominal predictors.
```

```{r}
#| label: workflow-imputed
#| purl: true
#| eval: true
#| echo: false
#| output: false
purrr_thyroid_workflow_imputed <- purrr_thyroid_recipe_imputed |>
    purrr::map(\(recipe) workflows::workflow()) |>
saveRDS(thyroid_workflow, file = paste(r_dir, "thyroid_workflow.rds", sep = "/"))
```

```{r}
#| label: workflow-imputed
#| purl: true
#| eval: true
#| echo: false
#| output: false
tune_spec_elastic <- parsnip::logistic_reg(penalty = hardhat::tune(), mixture = 0.5) |>
  parsnip::set_engine("glmnet")
## We must make a list of our workflow and cross validation and use purrr:pmap() to pass both into tune::tune_grid()
l <- list(workflow = purrr_thyroid_workflow_imputed, resamples = purrr_cv_folds)
purrr_elastic_grid_imputed <-
    purrr::pmap(l,
               tune::tune_grid(
                   object = workflows::add_model(workflow, tune_spec_elastic),
                   resamples = resamples,
                   grid = dials::grid_regular(penalty(), levels = 50)))
#purrr_elastic_grid_imputed <- purrr_thyroid_workflow_imputed |>
#    purrr::pmap(\(workflow),
#               tune::tune_grid(
#                   object = workflows::add_model(workflow, tune_spec_elastic),
#                   resamples = ,
#                   grid = dials::grid_regular(penalty(), levels = 50)))
```
